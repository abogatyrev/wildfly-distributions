apply from: 'properties.gradle'
import io.github.httpbuilderng.http.HttpTask

buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.netflix.nebula:gradle-ospackage-plugin:${gradleOspackagePlugin}"
        classpath 'gradle.plugin.io.github.http-builder-ng:http-plugin:0.1.1'
    }
}

apply plugin: "io.github.http-builder-ng.http-plugin"

subprojects {
    if (project.parent.name == 'wildfly-modules' || project.parent.name == 'wildfly-server') {
        apply plugin: 'nebula.ospackage'
        apply plugin: 'maven-publish'
        apply plugin: 'io.github.http-builder-ng.http-plugin'

        if (project.parent.name == 'wildfly-modules') {
            // in case of conflicts need to use: rpm -iv --replacefiles rpm_name.rpm
            ospackage {
                println "Artifact: ${distributionPackageName}-${distributionPackageVersion}-${distributionPackageRelease}"
                distributionTags = "${distributionTags}".split(',')
                println "Tags: ${distributionTags}"

                packageName = "${distributionPackageName}"
                version = "${distributionPackageVersion}"
                release = "${distributionPackageRelease}"

                user = 'wildfly'
                permissionGroup = 'wildfly'

                os = LINUX
                type = BINARY

                license = "${distributionPackageLicense}"
                url = "${distributionPackageUrl}"

                packager = 'Andrey Bogatyrev'
                packageDescription = "${distributionPackageDescription}"

                distributionTags.each {
                    provides("$it".trim())
                }

                requires('wildfly')

                from('/resources') {
                    into '/opt/wildfly/modules'
                }

//            postInstall file('../_resources/rpm/scripts/echo_restart_wildfly.sh')
            }
        }

        publishing {
            repositories {
                maven {
                    name 'wfCommonRpm'
                    url 'http://nexus.avbsoft.org/repository/wildfly-distributions/'
                    allowInsecureProtocol true

                    credentials {
                        username = "${nexusUsername}"
                        password = "${nexusPassword}"
                    }
                }
                maven {
                    name 'wfCommonDeb'
                    url 'https://nexus.avbsoft.org/repository/wildfly-common-deb/'
                    allowInsecureProtocol true

                    credentials {
                        username = "${nexusUsername}"
                        password = "${nexusPassword}"
                    }
                }
            }
        }

        publishing {
            publications {
                rpm(MavenPublication) {
                    artifacts {
                        artifact("${buildDir}/distributions/${distributionPackageName}-${distributionPackageVersion}-${distributionPackageRelease}.noarch.rpm") {
                            artifactId "${distributionPackageName}"
                            classifier 'noarch'
                            extension 'rpm'
                            version "${distributionPackageVersion}-${distributionPackageRelease}"
                        }
                    }
                    pom {
                        packaging = 'rpm'
                    }
                }
                /*
                You can use HTTP POST or use Upload in the UI, as documented here, to upload packages to Apt hosted repository.
                The following example uses the  curl  command and example credentials of admin for user and admin123 for password to upload a test.deb file to a hosted Apt repository:
                > curl -u "admin:admin123" -H "Content-Type: multipart/form-data" --data-binary "@./test.deb" "http://localhost:8081/repository/apt-hosted/"
                */
                deb(MavenPublication) {
                    artifacts {
                        artifact("${buildDir}/distributions/${distributionPackageName}_${distributionPackageVersion}-${distributionPackageRelease}_all.deb") {
                            artifactId "${distributionPackageName}"
                            classifier 'all'
                            extension 'deb'
                            version "${distributionPackageVersion}-${distributionPackageRelease}"
                        }
                    }
                    pom {
                        packaging = 'deb'
                    }
                }
            }
        }
        task buildAndPublishRpm(dependsOn: [buildRpm, publishRpmPublicationToWfCommonRpmRepository]) {}
        publishRpmPublicationToWfCommonRpmRepository.mustRunAfter([buildRpm])

//        task buildAndPublishDeb(dependsOn: [buildDeb, publishDebPublicationToWfCommonDebRepository]) {}
//        publishDebPublicationToWfCommonDebRepository.mustRunAfter([buildDeb])

        //TODO: https://github.com/http-builder-ng/gradle-http-plugin
        /*task buildAndPublishDeb(type: HttpTask) {
            config {
                it.request.setUri = "http://something.com"
            }
            post {
                it.request.uri.setPath("/notify")
            }
            response.success { fromServer, body ->
                println("The event notification was successful")
            }
        }*/

    }
}

task Wrapper(type: Wrapper) { // run > gradle wrapper
    gradleVersion = "${gradleVersion}"
}
