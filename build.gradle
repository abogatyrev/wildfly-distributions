apply from: 'properties.gradle'

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.netflix.nebula:gradle-ospackage-plugin:${gradleOspackagePlugin}"
    }
}

subprojects {
    if (project.parent.name == 'wildfly-modules' || project.name == 'wildfly-server') {
        apply plugin: 'nebula.ospackage'
        apply plugin: 'maven'

        if (project.parent.name == 'wildfly-modules') {
            // in case of conflicts need to use: rpm -iv --replacefiles rpm_name.rpm
            ospackage {
                println "RPM artifact: ${distributionPackageName}-${distributionPackageVersion}-${distributionPackageRelease}.noarch.rpm"
                distributionTags = "${distributionTags}".split(',')
                println "Tags: ${distributionTags}"

                packageName = "${distributionPackageName}"
                version = "${distributionPackageVersion}"
                release = "${distributionPackageRelease}"

                user = 'root'
                permissionGroup = 'root'

                os = LINUX
                type = BINARY

                license = "${distributionPackageLicense}"
                url = "${distributionPackageUrl}"

                packager = 'Andrey Bogatyrev'
                packageDescription = "${distributionPackageDescription}"

                distributionTags.each {
                    provides("$it".trim())
                }

                requires('wildfly')

                from('/resources') {
                    into '/opt/wildfly/modules'

                    addParentDirs = false
                    createDirectoryEntry = true
                }

//            postInstall file('../_resources/rpm/scripts/echo_restart_wildfly.sh')
            }
        }

        configurations {
            distributions
        }
        artifacts {
            distributions file: new File("${buildDir}/distributions", "${distributionPackageName}-${distributionPackageVersion}-${distributionPackageRelease}.noarch.rpm"),
                    name: "${distributionPackageName}", type: 'rpm', classifier: 'noarch'
        }

        uploadDistributions {
            description 'Uploads the RPM distributions.'
            group 'publishing'
            repositories {
                mavenDeployer {
                    configuration = configurations.distributions
                    repository(url: 'http://nexus.avbsoft.org/content/repositories/wildfly-distributions/') {
                        authentication(userName: "${nexusUsername}", password: "${nexusPassword}")
                    }
                    if (project.name == 'wildfly-server') {
                        addFilter('rpm-prod') { artifact, file ->
                            artifact.ext == 'rpm'
                            artifact.name == "${distributionPackageName}"
                        }
                        pom('rpm-prod').version = "${distributionPackageVersion}-${distributionPackageRelease}"
                        pom('rpm-prod').artifactId = "${distributionPackageName}"
                        pom('rpm-prod').whenConfigured { pom -> pom.dependencies.clear() } // not need dependencies...

                        addFilter('rpm-dev') { artifact, file ->
                            artifact.ext == 'rpm'
                            artifact.name == "${distributionPackageName}-dev"
                        }
                        pom('rpm-dev').version = "${distributionPackageVersion}-${distributionPackageRelease}"
                        pom('rpm-dev').artifactId = "${distributionPackageName}-dev"
                        pom('rpm-dev').whenConfigured { pom -> pom.dependencies.clear() } // not need dependencies...
                    } else {
                        pom.version = "${distributionPackageVersion}-${distributionPackageRelease}"
                        pom.whenConfigured { pom -> pom.dependencies.clear() } // not need dependencies...
                    }
                }
            }
        }

        task buildAndPublish(dependsOn: [buildRpm, uploadDistributions]) {}
        uploadDistributions.mustRunAfter([buildRpm])

    }


    task Wrapper(type: Wrapper) { // run > gradle wrapper
        gradleVersion = "${gradleVersion}"
    }
}