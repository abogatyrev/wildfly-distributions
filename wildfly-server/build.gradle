ospackage {
    println "RPM artifacts: \n" +
            "1. ${distributionPackageName}-${distributionPackageVersion}-${distributionPackageRelease}.noarch.rpm\n" +
            "2. ${distributionPackageName}-dev-${distributionPackageVersion}-${distributionPackageRelease}.noarch.rpm"
    distributionTags = "${distributionTags}".split(',')
    println "Tags: ${distributionTags}"

    version = "${distributionPackageVersion}"
    release = "${distributionPackageRelease}"

    user = 'root'
    permissionGroup = 'root'

    os = LINUX
    type = BINARY

    license = "${distributionPackageLicense}"
    url = "${distributionPackageUrl}"

    packager = 'Andrey Bogatyrev'

    distributionTags.each {
        provides("$it".trim())
    }

//    requires('jdk-9.0.4', '9.0.4', GREATER | EQUAL)

    from("/resources/${wildflyName}/") {
        into '/opt/wildfly'
        createDirectoryEntry = true
    }
    link("/opt/${wildflyName}", '/opt/wildfly')

    preInstall file('/scripts/preInstall.sh')
    postInstall file('/scripts/postInstall.sh')
    preUninstall file('/scripts/preUninstall.sh')
    postUninstall file('/scripts/postUninstall.sh')
}

task buildWildflyFinalProdRpm(type: Rpm) {
    packageName = "${distributionPackageName}"
    packageDescription = "${distributionPackageDescription}"

    conflicts("${distributionPackageName}-dev")

    from('/resources/standalone/wildfly.conf') {
        into '/etc/wildfly'
    }
    from('/resources/standalone/wildfly.service') {
        into '/etc/systemd/system'
    }
    from('/resources/standalone/launch.sh') {
        into '/opt/wildfly/bin'
    }
}

task buildWildflyFinalDevRpm(type: Rpm) {
    packageName = "${distributionPackageName}-dev"
    packageDescription = "${distributionPackageDescription} Configured for developing wildfly applications."

    conflicts("${distributionPackageName}")

    distributionTags.each {
        provides("$it".trim() + '-dev')
    }

    from('/resources/standalone-dev/wildfly.conf') {
        into '/etc/wildfly'
    }
    from('/resources/standalone-dev/wildfly.service') {
        into '/etc/systemd/system'
    }
    from('/resources/standalone-dev/launch.sh') {
        into '/opt/wildfly/bin'
    }
    from('/resources/standalone-dev/standalone.xml') {
        into '/opt/wildfly/standalone/configuration'
    }
}

publishing {
    publications {
        wfProdRpm(MavenPublication) {
            artifact("${buildDir}/distributions/${distributionPackageName}-${distributionPackageVersion}-${distributionPackageRelease}.noarch.rpm") {
                artifactId "${distributionPackageName}"
                classifier 'noarch'
                extension 'rpm'
                version "${distributionPackageVersion}-${distributionPackageRelease}"
            }
        }
        wfDevRpm(MavenPublication) {
            artifact("${buildDir}/distributions/${distributionPackageName}-dev-${distributionPackageVersion}-${distributionPackageRelease}.noarch.rpm") {
                artifactId "${distributionPackageName}-dev"
                classifier 'noarch'
                extension 'rpm'
                version "${distributionPackageVersion}-${distributionPackageRelease}"
            }
        }
    }
}

task buildAndPublishWFServer(dependsOn: [buildWildflyFinalProdRpm, buildWildflyFinalDevRpm,
                                         publishWfProdRpmPublicationToDistributionRepository,
                                         publishWfDevRpmPublicationToDistributionRepository]) {}
publishWfProdRpmPublicationToDistributionRepository.mustRunAfter([buildWildflyFinalProdRpm])
publishWfDevRpmPublicationToDistributionRepository.mustRunAfter([buildWildflyFinalDevRpm])