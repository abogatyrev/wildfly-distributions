def distributionTags = ['wildfly', 'wildfly-server']

ospackage {
    version = "${distributionPackageVersion}"
    release = "${distributionPackageRelease}"
    user = 'root'

    // arch = X86_64 - wildfly not depend on CPU architecture
    os = LINUX
    type = BINARY

    license = "${distributionPackageLicense}"
    url = "${distributionPackageUrl}"
    sourcePackage = '-'

    packager = 'Andrey Bogatyrev'
    buildHost = 'localhost'

    distributionTags.each {
        provides("$it")
    }

    requires('java-1.8.0', '1.8', GREATER | EQUAL)

    into '/opt'

    from('/resources/wildfly-10.0.0.Final') {
        into 'wildfly'
    }
    link('/opt/wildfly-10.0.0.Final', '/opt/wildfly')
}

buildRpm {
    packageName = "${distributionPackageName}"
    packageDescription = "${distributionPackageDescription}"

    preInstall file('/scripts/preInstall.sh')
    postInstall file('/scripts/postInstall.sh')
    preUninstall file('/scripts/preUninstall.sh')
    postUninstall file('/scripts/postUninstall.sh')

    from('/resources/standalone/wildfly.conf') {
        into '/etc/wildfly'
    }
    from('/resources/standalone/wildfly.service') {
        into '/etc/systemd/system'
    }
    from('/resources/standalone/launch.sh') {
        into '/opt/wildfly/bin'
    }
}

task buildWildfly10FinalDevRpm (type: Rpm) {
    packageName = "${distributionPackageName}-dev"
    packageDescription = "${distributionPackageDescription} Configured for developing wildfly applications."

    preInstall file('/scripts/preInstall.sh')
    postInstall file('/scripts/postInstall.sh')
    preUninstall file('/scripts/preUninstall.sh')
    postUninstall file('/scripts/postUninstall.sh')

    from('/resources/standalone-dev/wildfly.conf') {
        into '/etc/wildfly'
    }
    from('/resources/standalone-dev/wildfly.service') {
        into '/etc/systemd/system'
    }
    from('/resources/standalone-dev/launch.sh') {
        into '/opt/wildfly/bin'
    }
    from('/resources/standalone-dev/standalone.xml') {
        into '/opt/wildfly/standalone/configuration'
    }
}

/*
buildDeb {
    //requires('bat', '1.0.1')
    //link('/etc/init.d/foo', '/opt/foo/bin/foo.upstart')
}
*/

//vcsIssues - https://github.com/abogatyrev/wildfly-distributions/issues
// vcsTag

bintray {
    pkg {
        repo = 'wildfly_distributions'
        name = "${distributionPackageName}"
        desc = "${distributionPackageDescription}"
        websiteUrl = "${distributionPackageUrl}"
        licenses = ["${distributionPackageLicense}"]
        vcsUrl = 'https://github.com/abogatyrev/wildfly-distributions.git'
        issueTrackerUrl = 'https://github.com/abogatyrev/wildfly-distributions/issues'
        labels = distributionTags
        publicDownloadNumbers = true
        version {
            name = "${distributionPackageVersion}-${distributionPackageRelease}"
            vcsTag = '-'
        }
    }
}

task buildAndPublish(dependsOn: [buildRpm, buildWildfly10FinalDevRpm, bintrayUpload]){}

bintrayUpload.mustRunAfter([buildRpm, buildWildfly10FinalDevRpm])